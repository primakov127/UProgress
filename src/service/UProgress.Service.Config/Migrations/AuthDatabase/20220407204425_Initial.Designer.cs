// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UProgress.Service.Config.Contexts;

#nullable disable

namespace UProgress.Service.Config.Migrations.AuthDatabase
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20220407204425_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("193d2a83-4371-4e70-8cc1-420d401a02df"),
                            ConcurrencyStamp = "3d99b382-2403-4423-a853-be7315f67ee6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("5c6a2bb9-2662-4420-bae4-73e2d260c649"),
                            ConcurrencyStamp = "11c21e98-530f-4739-93f8-47d153aafe20",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("e27f0634-9582-41fc-991e-eec2150a4179"),
                            ConcurrencyStamp = "75321958-7c52-4a58-942a-1543e582c666",
                            Name = "GroupHead",
                            NormalizedName = "GROUPHEAD"
                        },
                        new
                        {
                            Id = new Guid("51822b2a-fc6b-4f79-a5d7-86687d20128d"),
                            ConcurrencyStamp = "fcc1271c-8879-491b-a0b2-b3d3c7483d31",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Policy",
                            ClaimValue = "EditUsers",
                            RoleId = new Guid("193d2a83-4371-4e70-8cc1-420d401a02df")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Policy",
                            ClaimValue = "User:GetCurrentUser",
                            RoleId = new Guid("193d2a83-4371-4e70-8cc1-420d401a02df")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0294124d-5084-4953-ba67-332ee3632762"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aac8edfb-14e7-4f1a-ba28-17bbacef00a4",
                            Email = "shiman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "DECAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDHT21XHDIzik5BFARaha/devFjrwZ61Ony9eCojygpWTGeSKSwVyagjrUEOAQluZA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "decan"
                        },
                        new
                        {
                            Id = new Guid("afbb9749-f7c1-4886-8284-1f9294477c76"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b0fd9ec-b428-45e9-9133-0548614546bc",
                            Email = "patsei@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMn99iwA+W0bUCYWNoegIqgtoaGHLPfXPs3EJub116Jv/jF0kq3zqSZMNJhrwVXX9A==",
                            PhoneNumber = "+375295463843",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("625a7ff4-39a4-445b-af85-12b5e8392278"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "539c8a93-bd28-40d0-937d-4e70df11ce71",
                            Email = "primakov127@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "HEAD",
                            PasswordHash = "AQAAAAEAACcQAAAAEGGLupq9pn5LiMYpOgAPss7n3R16VeERxWiH1IyW8kAUsewdnnY9wFoMiTYX/VeUKg==",
                            PhoneNumber = "+375447843293",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "head"
                        },
                        new
                        {
                            Id = new Guid("4abc4d94-7e61-44e6-ad97-ecb795d3b995"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44178e5b-b21a-46d8-90b5-b33304b46208",
                            Email = "ginko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEDge6FlB71xcy3jZErz+u5U2yrBayRshQWLNohCSGaIUI7qbDw60AwMcEr5lLlyx0A==",
                            PhoneNumber = "+375447835693",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0294124d-5084-4953-ba67-332ee3632762"),
                            RoleId = new Guid("193d2a83-4371-4e70-8cc1-420d401a02df")
                        },
                        new
                        {
                            UserId = new Guid("0294124d-5084-4953-ba67-332ee3632762"),
                            RoleId = new Guid("5c6a2bb9-2662-4420-bae4-73e2d260c649")
                        },
                        new
                        {
                            UserId = new Guid("afbb9749-f7c1-4886-8284-1f9294477c76"),
                            RoleId = new Guid("5c6a2bb9-2662-4420-bae4-73e2d260c649")
                        },
                        new
                        {
                            UserId = new Guid("625a7ff4-39a4-445b-af85-12b5e8392278"),
                            RoleId = new Guid("e27f0634-9582-41fc-991e-eec2150a4179")
                        },
                        new
                        {
                            UserId = new Guid("625a7ff4-39a4-445b-af85-12b5e8392278"),
                            RoleId = new Guid("51822b2a-fc6b-4f79-a5d7-86687d20128d")
                        },
                        new
                        {
                            UserId = new Guid("4abc4d94-7e61-44e6-ad97-ecb795d3b995"),
                            RoleId = new Guid("51822b2a-fc6b-4f79-a5d7-86687d20128d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
